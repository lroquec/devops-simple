name: Build
on:
  # push: 
  #   branches: 
  #     - main
  # pull_request:
  #   branches: [main]
  #   types: [opened, synchronize]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  flake8-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          path: "admin-service user-service"

  test-and-sonarcloud:
    needs: flake8-lint 
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd admin-service
          pip install -r requirements.txt
          pip install pytest pytest-cov coverage-badge
          cd ..
          
      - name: Run tests for admin-service
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          cd admin-service
          python -m pytest --cov=. --cov-report=xml
          cd ..

      - name: Run tests for user-service
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          cd user-service
          pip install -r requirements.txt
          pip install pytest pytest-cov coverage-badge
          python -m pytest --cov=. --cov-report=xml
          cd ..

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-admin-service:
    needs: [test-and-sonarcloud]
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and Push admin-service
        uses: docker/build-push-action@v6
        with:
          context: ./admin-service
          file: ./admin-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}-admin:test

  build-user-service:
    needs: [test-and-sonarcloud]
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4

      - name: Set up QEMU for Docker Buildx
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and Push user-service
        uses: docker/build-push-action@v6
        with:
          context: ./user-service
          file: ./user-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}-user:test

  trivy-image-check-admin-service:
    needs: [build-admin-service]
    runs-on: ubuntu-latest
    steps:
      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.57.0_Linux-64bit.deb

      - name: Run Trivy vulnerability scanner
        run: |
          trivy image --severity CRITICAL --exit-code 1 --format sarif --output trivy-report.sarif ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}-admin:test

      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report-admin.sarif
          retention-days: 1

  trivy-image-check-user-service:
    needs: [build-user-service]
    runs-on: ubuntu-latest
    steps:
      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.57.0_Linux-64bit.deb

      - name: Run Trivy vulnerability scanner
        run: |
          trivy image --severity CRITICAL --exit-code 1 --format sarif --output trivy-report.sarif ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}-user:test

      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report-user.sarif
          retention-days: 1